{"version":3,"sources":["App.js","index.js"],"names":["App","React","useState","updateState","forceUpdate","useCallback","round","setRound","userSet","setUserSet","npcSet","setNpcSet","rerollSet","setRerollSet","status","setStatus","getResult","set","counts","count","forEach","x","Array","map","item","index","value","occurances","getCount","resValue","name","firstPair","findIndex","secondPair","find","rollSet","array","newSet","includes","Math","floor","random","getPointsFromSet","points","Object","keys","key","i","finishGame","walkover","userPoints","npcPoints","reducedUserSet","reduce","a","b","reducedNpcSet","getWinner","restartGame","style","display","padding","alignItems","justifyContent","flexDirection","textAlign","color","cursor","filter","reroll","alt","height","width","src","onClick","rerollIndex","newReroll","splice","push","margin","length","newRerollSet","roll","parseInt","getNpcReroll","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62dea6ba.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction App() {\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [round, setRound] = React.useState(0);\n  const [userSet, setUserSet] = React.useState([0, 0, 0, 0, 0]);\n  const [npcSet, setNpcSet] = React.useState([0, 0, 0, 0, 0]);\n  const [rerollSet, setRerollSet] = React.useState([]);\n  const [status, setStatus] = React.useState(\"\");\n  const getCount = set => {\n    var count = {};\n    set.forEach(function(x) {\n      count[x] = (count[x] || 0) + 1;\n    });\n\n    return [...new Array(6)].map((item, index) => ({\n      value: index + 1,\n      occurances: count[index + 1] || 0\n    }));\n  };\n  const getResult = set => {\n    let counts = getCount(set);\n    let resValue = { value: 1, name: \"Nic\" };\n    let firstPair = counts.findIndex(item => item.occurances > 1);\n    let secondPair =\n      firstPair !== -1\n        ? counts.findIndex(\n            item =>\n              item.value !== counts[firstPair].value && item.occurances > 1\n          )\n        : -1;\n\n    if (firstPair === -1) resValue = { value: 5, name: \"Mały Strit\" };\n    if (\n      firstPair === -1 &&\n      !counts.find(item => item.value === 1 && item.occurances > 0)\n    )\n      resValue = { value: 6, name: \"Duży Strit\" };\n    if (firstPair !== -1) {\n      resValue = { value: 2, name: \"Para\" };\n      if (counts[firstPair].occurances === 3)\n        resValue = { value: 4, name: \"Trójka\" };\n      if (counts[firstPair].occurances === 4)\n        resValue = { value: 8, name: \"Kareta\" };\n      if (counts[firstPair].occurances === 5)\n        resValue = { value: 9, name: \"Poker\" };\n      if (secondPair !== -1) {\n        resValue = { value: 3, name: \"Dwie pary\" };\n        if (counts[firstPair].occurances === 3 && secondPair !== -1)\n          resValue = { value: 7, name: \"Full\" };\n        if (\n          secondPair !== -1 &&\n          counts[secondPair].occurances === 3 &&\n          firstPair !== -1\n        )\n          resValue = { value: 7, name: \"Full\" };\n      }\n    }\n\n    return resValue;\n  };\n\n  const rollD6 = () => {\n    return Math.floor(6 * Math.random()) + 1;\n  };\n  const rollSet = (set, array) => {\n    let newSet = set;\n\n    set.forEach((item, index) => {\n      if (item === 0 || array.includes(index)) {\n        newSet[index] = rollD6();\n      }\n    });\n    return newSet;\n  };\n\n  const getNpcReroll = () => {\n    let userPoints = getResult(userSet).value;\n    let npcPoints = getResult(npcSet).value;\n    if (\n      (round >= 2 && getResult(userSet).value === getResult(npcSet).value) ||\n      (round >= 1 && userPoints >= npcPoints) ||\n      rerollSet.length > 0\n    ) {\n      var count = {};\n      npcSet.forEach(function(x) {\n        count[x] = (count[x] || 0) + 1;\n      });\n\n      var newRerollSet = [];\n      Object.keys(count)\n        .map(key => ({ value: key, occurances: count[key] }))\n        .forEach((item, index) => {\n          if (item.occurances === 1) {\n            newRerollSet.push(\n              npcSet.findIndex(roll => {\n                return parseInt(roll) === parseInt(item.value);\n              })\n            );\n          }\n        });\n\n      return newRerollSet;\n    }\n    return [];\n  };\n\n  const confirmMove = () => {\n    setStatus(\"inprogress\");\n    setUserSet(rollSet(userSet, rerollSet));\n    setNpcSet(rollSet(npcSet, getNpcReroll()));\n    setRound(round + 1);\n    setRerollSet([]);\n    forceUpdate();\n  };\n\n  const getPointsFromSet = set => {\n    var count = {};\n    set.forEach(function(x) {\n      count[x] = (count[x] || 0) + 1;\n    });\n\n    var points = 0;\n    Object.keys(count)\n      .map(key => ({ value: key, occurances: count[key] }))\n      .forEach((item, i) => {\n        if (item.occurances > 1) {\n          points = points + item.value * item.occurances;\n        }\n      });\n\n    return points;\n  };\n  const getWinner = walkover => {\n    if (walkover) return \"failure\";\n    let userPoints = getResult(userSet).value;\n    let npcPoints = getResult(npcSet).value;\n\n    if (userPoints > npcPoints) return \"victory\";\n    if (userPoints < npcPoints) return \"failure\";\n    if (userPoints === npcPoints) {\n      let reducedUserSet = userSet.reduce((a, b) => {\n        return a + b;\n      });\n      let reducedNpcSet = npcSet.reduce((a, b) => {\n        return a + b;\n      });\n      if (reducedUserSet > reducedNpcSet) return \"victory\";\n      if (reducedUserSet < reducedNpcSet) return \"failure\";\n      if (reducedUserSet === reducedNpcSet) return \"draw\";\n    }\n  };\n  const finishGame = walkover => {\n    status === \"\" || status === \"inprogress\"\n      ? setStatus(\n          getWinner(\n            getPointsFromSet(userSet),\n            getPointsFromSet(npcSet),\n            walkover\n          )\n        )\n      : restartGame();\n  };\n  const restartGame = () => {\n    setUserSet([0, 0, 0, 0, 0]);\n    setNpcSet([0, 0, 0, 0, 0]);\n    setRerollSet([]);\n    setRound(0);\n    setStatus(\"\");\n    forceUpdate();\n  };\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          textAlign: \"center\"\n        }}\n      >\n        {status === \"inprogress\" && (\n          <div style={{ color: \"gray\" }}>\n            Kliknij na kość żeby oznaczyć ją do przerzucenia\n          </div>\n        )}\n        <br />\n        <br />\n        Twoje kości\n        <div style={{ display: \"flex\" }}>\n          {userSet.map((item, index) => (\n            <div>\n              <img\n                style={{\n                  padding: 3,\n                  cursor: \"pointer\",\n                  filter:\n                    rerollSet.findIndex(reroll => reroll === index) !== -1 &&\n                    \"sepia(100%) hue-rotate(90deg) saturate(400%) brightness(80%)\"\n                }}\n                alt={item}\n                height=\"30\"\n                width=\"30\"\n                src={`./images/dice${item}.png`}\n                onClick={() => {\n                  if (status === \"inprogress\") {\n                    let rerollIndex = rerollSet.findIndex(\n                      reroll => reroll === index\n                    );\n                    if (rerollIndex !== -1) {\n                      let newReroll = rerollSet;\n                      newReroll.splice(rerollIndex, 1);\n                      setRerollSet(newReroll);\n                    } else {\n                      let newReroll = rerollSet;\n                      newReroll.push(index);\n                      setRerollSet(newReroll);\n                    }\n                    forceUpdate();\n                  }\n                }}\n              />\n            </div>\n          ))}\n        </div>\n        {round !== 0 && `${getResult(userSet).name}`}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n        Kości przeciwnika\n        <div style={{ display: \"flex\" }}>\n          {npcSet.map(item => (\n            <div style={{ filter: \"brightness(60%)\" }}>\n              <img\n                style={{ padding: 3 }}\n                alt={item}\n                height=\"30\"\n                width=\"30\"\n                src={`./images/dice${item}.png`}\n              />\n            </div>\n          ))}\n        </div>\n        {round !== 0 && `${getResult(npcSet).name}`}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        }}\n      >\n        <button\n          style={{ margin: 12 }}\n          onClick={\n            round >= 2 && getResult(userSet).value !== getResult(npcSet).value\n              ? finishGame\n              : confirmMove\n          }\n        >\n          {round === 0 && \"ROZPOCZNIJ GRĘ\"}\n          {round === 1 &&\n            (rerollSet.length > 0\n              ? \"PRZERZUĆ KOŚCI I KONTYNUUJ\"\n              : \"KONTYNUUJ BEZ PRZERZUCANIA\")}\n          {round >= 2 &&\n            getResult(userSet).value !== getResult(npcSet).value &&\n            (status === \"inprogress\" ? \"ZAKOŃCZ GRĘ\" : \"ZACZNIJ OD NOWA\")}\n          {round >= 2 &&\n            getResult(userSet).value === getResult(npcSet).value &&\n            (rerollSet.length > 0\n              ? \"PRZERZUĆ KOŚCI I KONTYNUUJ\"\n              : \"KONTYNUUJ BEZ PRZERZUCANIA\")}\n        </button>\n\n        <button\n          disabled={\n            round === 0 ||\n            (round >= 2 && getResult(userSet).value !== getResult(npcSet).value)\n          }\n          style={{ margin: 12 }}\n          onClick={() => finishGame(true)}\n        >\n          PODDAJ SIĘ\n        </button>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n        <h3\n          style={{\n            color:\n              status === \"victory\"\n                ? \"green\"\n                : status === \"failure\"\n                ? \"red\"\n                : status === \"draw\" && \"gray\"\n          }}\n        >\n          {status === \"victory\" && \"ZWYCIĘSTWO!\"}\n          {status === \"failure\" && \"PORAŻKA!\"}\n          {status === \"draw\" && \"REMIS!\"}\n          {status === \"inprogress\" && \"Runda \" + parseInt(round)}\n        </h3>\n        <button onClick={restartGame}>Resetuj</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}