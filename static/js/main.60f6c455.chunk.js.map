{"version":3,"sources":["App.js","index.js"],"names":["App","React","useState","language","setLanguage","updateState","forceUpdate","useCallback","round","setRound","userSet","setUserSet","npcSet","setNpcSet","rerollSet","setRerollSet","status","setStatus","translateString","str","getResult","set","counts","count","forEach","x","Array","map","item","index","value","occurances","getCount","resValue","name","firstPair","findIndex","secondPair","find","rollSet","array","newSet","includes","Math","floor","random","confirmMove","userPoints","npcPoints","length","newRerollSet","Object","keys","key","push","roll","parseInt","getNpcReroll","getPointsFromSet","points","i","finishGame","walkover","reducedUserSet","reduce","a","b","reducedNpcSet","getWinner","restartGame","style","display","justifyContent","alignItems","cursor","padding","onClick","flexDirection","textAlign","color","filter","reroll","alt","height","width","src","rerollIndex","newReroll","splice","margin","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60f6c455.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction App() {\n  const [language, setLanguage] = React.useState(\"pl\");\n  const [, updateState] = React.useState();\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n  const [round, setRound] = React.useState(0);\n  const [userSet, setUserSet] = React.useState([0, 0, 0, 0, 0]);\n  const [npcSet, setNpcSet] = React.useState([0, 0, 0, 0, 0]);\n  const [rerollSet, setRerollSet] = React.useState([]);\n  const [status, setStatus] = React.useState(\"\");\n  const translateString = str => {\n    switch (str) {\n      case \"Nic\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Nothing\";\n        break;\n      case \"Para\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Pair\";\n        break;\n      case \"Dwie pary\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Two Pairs\";\n        break;\n      case \"Trójka\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Three-of-a-Kind\";\n        break;\n      case \"Kareta\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Four-of-a-Kind\";\n        break;\n      case \"Poker\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Five-of-a-Kind\";\n        break;\n      case \"Mały strit\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Five High Straight\";\n        break;\n      case \"Duży strit\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Six High Straight\";\n        break;\n      case \"Full\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Full House\";\n        break;\n      case \"PORAŻKA!\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"FAILURE!\";\n        break;\n      case \"ZWYCIĘSTWO!\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"VICTORY!\";\n        break;\n      case \"REMIS!\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"DRAW!\";\n        break;\n      case \"Runda\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Round\";\n        break;\n      case \"ROZPOCZNIJ GRĘ\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"START\";\n        break;\n      case \"PRZERZUĆ KOŚCI I KONTYNUUJ\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"RE-ROLL AND CONTINUE\";\n        break;\n      case \"KONTYNUUJ BEZ PRZERZUCANIA\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"CONTINUE WITHOUT RE-ROLLING\";\n        break;\n      case \"ZAKOŃCZ GRĘ\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"FINISH\";\n        break;\n      case \"ZACZNIJ OD NOWA\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"PLAY AGAIN\";\n        break;\n      case \"PODDAJ SIĘ\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"GIVE UP\";\n        break;\n      case \"Kości przeciwnika\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Opponent dice\";\n        break;\n      case \"Twoje kości\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\") return \"Your dice\";\n        break;\n      case \"Kliknij na kość żeby oznaczyć ją do przerzucenia\":\n        if (language === \"pl\") return str;\n        if (language === \"eng\")\n          return \"Click on a dice to mark it for re-rolling\";\n        break;\n\n      //no default\n    }\n  };\n  const getCount = set => {\n    var count = {};\n    set.forEach(function(x) {\n      count[x] = (count[x] || 0) + 1;\n    });\n\n    return [...new Array(6)].map((item, index) => ({\n      value: index + 1,\n      occurances: count[index + 1] || 0\n    }));\n  };\n  const getResult = set => {\n    let counts = getCount(set);\n    let resValue = { value: 1, name: translateString(\"Nic\") };\n    let firstPair = counts.findIndex(item => item.occurances > 1);\n    let secondPair =\n      firstPair !== -1\n        ? counts.findIndex(\n            item =>\n              item.value !== counts[firstPair].value && item.occurances > 1\n          )\n        : -1;\n\n    if (firstPair === -1)\n      resValue = { value: 5, name: translateString(\"Mały Strit\") };\n    if (\n      firstPair === -1 &&\n      !counts.find(item => item.value === 1 && item.occurances > 0)\n    )\n      resValue = { value: 6, name: translateString(\"Duży Strit\") };\n    if (firstPair !== -1) {\n      resValue = { value: 2, name: translateString(\"Para\") };\n      if (counts[firstPair].occurances === 3)\n        resValue = { value: 4, name: translateString(\"Trójka\") };\n      if (counts[firstPair].occurances === 4)\n        resValue = { value: 8, name: translateString(\"Kareta\") };\n      if (counts[firstPair].occurances === 5)\n        resValue = { value: 9, name: translateString(\"Poker\") };\n      if (secondPair !== -1) {\n        resValue = { value: 3, name: translateString(\"Dwie pary\") };\n        if (counts[firstPair].occurances === 3 && secondPair !== -1)\n          resValue = { value: 7, name: translateString(\"Full\") };\n        if (\n          secondPair !== -1 &&\n          counts[secondPair].occurances === 3 &&\n          firstPair !== -1\n        )\n          resValue = { value: 7, name: translateString(\"Full\") };\n      }\n    }\n\n    return resValue;\n  };\n\n  const rollD6 = () => {\n    return Math.floor(6 * Math.random()) + 1;\n  };\n  const rollSet = (set, array) => {\n    let newSet = set;\n\n    set.forEach((item, index) => {\n      if (item === 0 || array.includes(index)) {\n        newSet[index] = rollD6();\n      }\n    });\n    return newSet;\n  };\n\n  const getNpcReroll = () => {\n    let userPoints = getResult(userSet).value;\n    let npcPoints = getResult(npcSet).value;\n    if (\n      (round >= 2 && getResult(userSet).value === getResult(npcSet).value) ||\n      (round >= 1 && userPoints >= npcPoints) ||\n      rerollSet.length > 0\n    ) {\n      var count = {};\n      npcSet.forEach(function(x) {\n        count[x] = (count[x] || 0) + 1;\n      });\n\n      var newRerollSet = [];\n      Object.keys(count)\n        .map(key => ({ value: key, occurances: count[key] }))\n        .forEach((item, index) => {\n          if (item.occurances === 1) {\n            newRerollSet.push(\n              npcSet.findIndex(roll => {\n                return parseInt(roll) === parseInt(item.value);\n              })\n            );\n          }\n        });\n\n      return newRerollSet;\n    }\n    return [];\n  };\n\n  const confirmMove = () => {\n    setStatus(\"inprogress\");\n    setUserSet(rollSet(userSet, rerollSet));\n    setNpcSet(rollSet(npcSet, getNpcReroll()));\n    setRound(round + 1);\n    setRerollSet([]);\n    forceUpdate();\n  };\n\n  const getPointsFromSet = set => {\n    var count = {};\n    set.forEach(function(x) {\n      count[x] = (count[x] || 0) + 1;\n    });\n\n    var points = 0;\n    Object.keys(count)\n      .map(key => ({ value: key, occurances: count[key] }))\n      .forEach((item, i) => {\n        if (item.occurances > 1) {\n          points = points + item.value * item.occurances;\n        }\n      });\n\n    return points;\n  };\n  const getWinner = walkover => {\n    if (walkover === true) {\n      return \"failure\";\n    } else {\n      let userPoints = getResult(userSet).value;\n      let npcPoints = getResult(npcSet).value;\n\n      if (userPoints > npcPoints) return \"victory\";\n      if (userPoints < npcPoints) return \"failure\";\n      if (userPoints === npcPoints) {\n        let reducedUserSet = userSet.reduce((a, b) => {\n          return a + b;\n        });\n        let reducedNpcSet = npcSet.reduce((a, b) => {\n          return a + b;\n        });\n        if (reducedUserSet > reducedNpcSet) return \"victory\";\n        if (reducedUserSet < reducedNpcSet) return \"failure\";\n        if (reducedUserSet === reducedNpcSet) return \"draw\";\n      }\n    }\n  };\n  const finishGame = walkover => {\n    status === \"\" || status === \"inprogress\"\n      ? setStatus(\n          getWinner(\n            getPointsFromSet(userSet),\n            getPointsFromSet(npcSet),\n            walkover\n          )\n        )\n      : restartGame();\n  };\n  const restartGame = () => {\n    setUserSet([0, 0, 0, 0, 0]);\n    setNpcSet([0, 0, 0, 0, 0]);\n    setRerollSet([]);\n    setRound(0);\n    setStatus(\"\");\n    forceUpdate();\n  };\n  return (\n    <div>\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\"\n        }}\n      >\n        <p\n          style={{ cursor: \"pointer\", padding: 4 }}\n          onClick={() => setLanguage(\"pl\")}\n        >\n          PL\n        </p>{\" \"}\n        {\"/\"}\n        <p\n          style={{ cursor: \"pointer\", padding: 4 }}\n          onClick={() => setLanguage(\"eng\")}\n        >\n          ENG\n        </p>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\",\n          textAlign: \"center\"\n        }}\n      >\n        {status === \"inprogress\" && (\n          <div style={{ color: \"gray\" }}>\n            {translateString(\n              \"Kliknij na kość żeby oznaczyć ją do przerzucenia\"\n            )}\n          </div>\n        )}\n        <br />\n        <br />\n        {translateString(\"Twoje kości\")}\n        <div style={{ display: \"flex\" }}>\n          {userSet.map((item, index) => (\n            <div>\n              <img\n                style={{\n                  padding: 3,\n                  cursor: \"pointer\",\n                  filter:\n                    rerollSet.findIndex(reroll => reroll === index) !== -1 &&\n                    \"sepia(100%) hue-rotate(90deg) saturate(400%) brightness(80%)\"\n                }}\n                alt={item}\n                height=\"30\"\n                width=\"30\"\n                src={`./images/dice${item}.png`}\n                onClick={() => {\n                  if (status === \"inprogress\") {\n                    let rerollIndex = rerollSet.findIndex(\n                      reroll => reroll === index\n                    );\n                    if (rerollIndex !== -1) {\n                      let newReroll = rerollSet;\n                      newReroll.splice(rerollIndex, 1);\n                      setRerollSet(newReroll);\n                    } else {\n                      let newReroll = rerollSet;\n                      newReroll.push(index);\n                      setRerollSet(newReroll);\n                    }\n                    forceUpdate();\n                  }\n                }}\n              />\n            </div>\n          ))}\n        </div>\n        {round !== 0 && `${getResult(userSet).name}`}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n        {translateString(\"Kości przeciwnika\")}\n        <div style={{ display: \"flex\" }}>\n          {npcSet.map(item => (\n            <div style={{ filter: \"brightness(60%)\" }}>\n              <img\n                style={{ padding: 3 }}\n                alt={item}\n                height=\"30\"\n                width=\"30\"\n                src={`./images/dice${item}.png`}\n              />\n            </div>\n          ))}\n        </div>\n        {round !== 0 && `${getResult(npcSet).name}`}\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\"\n        }}\n      >\n        <button\n          style={{ margin: 12 }}\n          onClick={() =>\n            round >= 2 && getResult(userSet).value !== getResult(npcSet).value\n              ? finishGame(false)\n              : confirmMove()\n          }\n        >\n          {round === 0 && translateString(\"ROZPOCZNIJ GRĘ\")}\n          {round === 1 &&\n            (rerollSet.length > 0\n              ? translateString(\"PRZERZUĆ KOŚCI I KONTYNUUJ\")\n              : translateString(\"KONTYNUUJ BEZ PRZERZUCANIA\"))}\n          {round >= 2 &&\n            getResult(userSet).value !== getResult(npcSet).value &&\n            (status === \"inprogress\"\n              ? translateString(\"ZAKOŃCZ GRĘ\")\n              : translateString(\"ZACZNIJ OD NOWA\"))}\n          {round >= 2 &&\n            getResult(userSet).value === getResult(npcSet).value &&\n            (rerollSet.length > 0\n              ? translateString(\"PRZERZUĆ KOŚCI I KONTYNUUJ\")\n              : translateString(\"KONTYNUUJ BEZ PRZERZUCANIA\"))}\n        </button>\n\n        <button\n          disabled={\n            round === 0 ||\n            (round >= 2 && getResult(userSet).value !== getResult(npcSet).value)\n          }\n          style={{ margin: 12 }}\n          onClick={() => finishGame(true)}\n        >\n          {translateString(\"PODDAJ SIĘ\")}\n        </button>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          padding: 12,\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          flexDirection: \"column\"\n        }}\n      >\n        <h3\n          style={{\n            color:\n              status === \"victory\"\n                ? \"green\"\n                : status === \"failure\"\n                ? \"red\"\n                : status === \"draw\" && \"gray\"\n          }}\n        >\n          {status === \"victory\" && translateString(\"ZWYCIĘSTWO!\")}\n          {status === \"failure\" && translateString(\"PORAŻKA!\")}\n          {status === \"draw\" && translateString(\"REMIS!\")}\n          {status === \"inprogress\" &&\n            translateString(\"Runda\") + \" \" + parseInt(round)}\n        </h3>\n        <button onClick={restartGame}>Reset</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}